// /Users/goldlabel/GitHub/core/gl-core/cartridges/Bouncer/actions/makeFingerprint.tsx
import { TUbereduxDispatch } from '../../../../gl-core/types';
import { setUbereduxKey, toggleFeedback } from '../../../../gl-core';
import FingerprintJS from '@fingerprintjs/fingerprintjs';
import { ping } from '../../Bouncer';
import { resend } from '../../../../gl-core';

export const makeFingerprint =
  (): any => async (dispatch: TUbereduxDispatch, getState: () => any) => {
    const state = getState();
    const bouncer = state?.redux?.bouncer;

    // Guard: if we are already making a fingerprint, do nothing
    if (bouncer?.makingFingerprint) {
      console.warn('makeFingerprint already in progress, skipping.');
      return;
    }

    // Set makingFingerprint = true
    dispatch(setUbereduxKey({ key: 'bouncer', value: { ...bouncer, makingFingerprint: true } }));

    try {
      const visitor = bouncer?.visitor || {};

      // 1. Generate fingerprint
      const fp = await FingerprintJS.load();
      const result = await fp.get();
      const fingerprint = `${window.location.hostname}_${result.visitorId}`;

      // 2. Look up IP + geo data
      const apiKey = process.env.NEXT_PUBLIC_IPGEOLOCATION_API_KEY;
      if (!apiKey) {
        throw new Error(
          'Missing NEXT_PUBLIC_IPGEOLOCATION_API_KEY in environment variables.',
        );
      }

      const geoRes = await fetch(
        `https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}`,
      );
      if (!geoRes.ok) {
        throw new Error(`Geo API error: ${geoRes.status} ${geoRes.statusText}`);
      }

      const geoData = await geoRes.json();

      // 3. Figure out if lastUpdated was < 10 seconds ago
      const now = Date.now();
      let status: string | undefined;
      if (visitor.lastUpdated && typeof visitor.lastUpdated === 'number') {
        const secondsSinceLastUpdate = (now - visitor.lastUpdated) / 1000;
        if (secondsSinceLastUpdate < 10) {
          status = 'online';
        }
      }

      // 4. Merge all info into visitor
      const updatedVisitor = {
        ...visitor,
        ready: true,
        lastUpdated: now,
        fingerprint,
        ip: geoData.ip || null,
        geo: {
          country: geoData.country_name || null,
          countryCode: geoData.country_code2 || null,
          region: geoData.state_prov || null,
          city: geoData.city || null,
          latitude: geoData.latitude || null,
          longitude: geoData.longitude || null,
          timezone: geoData.time_zone?.name || null,
        },
        ...(status ? { status } : {}),
      };

      const updatedBouncer = {
        ...bouncer,
        visitor: updatedVisitor,
        makingFingerprint: false, // reset flag
      };

      dispatch(
        toggleFeedback({
          severity: 'success',
          title: 'Ping ready',
        }),
      );

      // 5. Build email subject and body
      const subject = `New visitor fingerprint from ${geoData.city || 'Unknown City'}, ${geoData.country_code2 || '??'}`;

      const body = `
A new visitor fingerprint has been recorded.

Fingerprint: ${fingerprint}
IP Address: ${geoData.ip || 'N/A'}
Location: ${geoData.city || 'N/A'}, ${geoData.region || 'N/A'}, ${geoData.country_name || 'N/A'}
Coordinates: ${geoData.latitude || 'N/A'}, ${geoData.longitude || 'N/A'}
Timezone: ${geoData.time_zone?.name || 'N/A'}

Status: ${status || 'initial'}
Last Updated: ${new Date(now).toISOString()}

This notification was automatically generated by Bouncer in Goldlabel Core.
`;

      // 6. Send notification email
      dispatch(
        resend({
          to: 'goldlabel.apps@gmail.com',
          subject,
          body,
        }),
      );

      // 7. Update state
      dispatch(setUbereduxKey({ key: 'bouncer', value: updatedBouncer }));

      // 8. Once ready is true, dispatch ping
      if (updatedVisitor.ready) {
        dispatch(ping());
      }
    } catch (e: unknown) {
      const msg = e instanceof Error ? e.message : String(e);
      // Reset the flag even on error
      dispatch(
        setUbereduxKey({
          key: 'bouncer',
          value: { ...bouncer, makingFingerprint: false },
        }),
      );
      dispatch(setUbereduxKey({ key: 'error', value: msg }));
    }
  };
